// @generated by protoc-gen-es v2.2.3 with parameter "target=js+dts,import_extension=none,json_types=true"
// @generated from file cassie/sockets.proto (syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import type { Message } from "@bufbuild/protobuf";
import type { Code, CodeJson } from "../google/rpc/code_pb";
import type { ExecuteRequest, ExecuteRequestJson, ExecuteResponse, ExecuteResponseJson } from "../runme/runner/v2/runner_pb";

/**
 * Describes the file cassie/sockets.proto.
 */
export declare const file_cassie_sockets: GenFile;

/**
 * Represents socket-level status (e.g., for auth, protocol, or other errors).
 *
 * @generated from message SocketStatus
 */
export declare type SocketStatus = Message<"SocketStatus"> & {
  /**
   * @generated from field: google.rpc.Code code = 1;
   */
  code: Code;

  /**
   * @generated from field: string message = 2;
   */
  message: string;
};

/**
 * Represents socket-level status (e.g., for auth, protocol, or other errors).
 *
 * @generated from message SocketStatus
 */
export declare type SocketStatusJson = {
  /**
   * @generated from field: google.rpc.Code code = 1;
   */
  code?: CodeJson;

  /**
   * @generated from field: string message = 2;
   */
  message?: string;
};

/**
 * Describes the message SocketStatus.
 * Use `create(SocketStatusSchema)` to create a new message.
 */
export declare const SocketStatusSchema: GenMessage<SocketStatus, SocketStatusJson>;

/**
 * SocketRequest defines the message sent by the client over a websocket.
 * The request is a union of types that indicate the type of message.
 *
 * @generated from message SocketRequest
 */
export declare type SocketRequest = Message<"SocketRequest"> & {
  /**
   * @generated from oneof SocketRequest.payload
   */
  payload: {
    /**
     * Add other payloads here as needed.
     *
     * @generated from field: runme.runner.v2.ExecuteRequest execute_request = 1;
     */
    value: ExecuteRequest;
    case: "executeRequest";
  } | { case: undefined; value?: undefined };

  /**
   * Optional authorization header, similar to the HTTP Authorization header.
   *
   * @generated from field: string authorization = 200;
   */
  authorization: string;
};

/**
 * SocketRequest defines the message sent by the client over a websocket.
 * The request is a union of types that indicate the type of message.
 *
 * @generated from message SocketRequest
 */
export declare type SocketRequestJson = {
  /**
   * Add other payloads here as needed.
   *
   * @generated from field: runme.runner.v2.ExecuteRequest execute_request = 1;
   */
  executeRequest?: ExecuteRequestJson;

  /**
   * Optional authorization header, similar to the HTTP Authorization header.
   *
   * @generated from field: string authorization = 200;
   */
  authorization?: string;
};

/**
 * Describes the message SocketRequest.
 * Use `create(SocketRequestSchema)` to create a new message.
 */
export declare const SocketRequestSchema: GenMessage<SocketRequest, SocketRequestJson>;

/**
 * SocketResponse defines the message sent by the server over a websocket.
 * The response is a union of types that indicate the type of message.
 *
 * @generated from message SocketResponse
 */
export declare type SocketResponse = Message<"SocketResponse"> & {
  /**
   * @generated from oneof SocketResponse.payload
   */
  payload: {
    /**
     * Add other payloads here as needed.
     *
     * @generated from field: runme.runner.v2.ExecuteResponse execute_response = 1;
     */
    value: ExecuteResponse;
    case: "executeResponse";
  } | { case: undefined; value?: undefined };

  /**
   * Optional socket-level status.
   *
   * @generated from field: SocketStatus status = 200;
   */
  status?: SocketStatus;
};

/**
 * SocketResponse defines the message sent by the server over a websocket.
 * The response is a union of types that indicate the type of message.
 *
 * @generated from message SocketResponse
 */
export declare type SocketResponseJson = {
  /**
   * Add other payloads here as needed.
   *
   * @generated from field: runme.runner.v2.ExecuteResponse execute_response = 1;
   */
  executeResponse?: ExecuteResponseJson;

  /**
   * Optional socket-level status.
   *
   * @generated from field: SocketStatus status = 200;
   */
  status?: SocketStatusJson;
};

/**
 * Describes the message SocketResponse.
 * Use `create(SocketResponseSchema)` to create a new message.
 */
export declare const SocketResponseSchema: GenMessage<SocketResponse, SocketResponseJson>;

